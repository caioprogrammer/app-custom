import React from 'react';
import { OrderQueueContext } from '@vtex/order-manager';
import { OrderForm as CheckoutOrderForm, Address as CheckoutAddress, DeliveryOption, PickupOption } from '@vtex/checkout-types';
import { UseLogger } from '../utils/logger';
export declare const QueueStatus: {
    readonly PENDING: "Pending";
    readonly FULFILLED: "Fulfilled";
};
interface InsertAddressResult {
    success: boolean;
    orderForm?: CheckoutOrderForm;
}
interface SelectShippingOptionResult {
    success: boolean;
    orderForm?: CheckoutOrderForm;
}
interface SelectAddressResult {
    success: boolean;
}
interface ShippingContext {
    searchedAddress: CheckoutAddress | null;
    countries: string[];
    canEditData: boolean;
    selectedAddress?: CheckoutAddress;
    updateSelectedAddress: (address: CheckoutAddress) => Promise<SelectAddressResult>;
    insertAddress: (address: CheckoutAddress) => Promise<InsertAddressResult>;
    deliveryOptions: DeliveryOption[];
    pickupOptions: PickupOption[];
    selectDeliveryOption: (option: string) => Promise<SelectShippingOptionResult>;
    selectPickupOption: (option: string) => Promise<SelectShippingOptionResult>;
}
declare type ListenFunction = (event: any, callback: () => void) => () => void;
interface QueueContext {
    enqueue: (task: () => Promise<CheckoutOrderForm>, id?: string) => any;
    listen: ListenFunction;
    isWaiting: (id: string) => boolean;
}
declare type OrderFormUpdate<O> = Partial<O> | ((prevOrderForm: O) => Partial<O>);
interface OrderContext<O extends CheckoutOrderForm> {
    loading: boolean;
    setOrderForm: (nextValue: OrderFormUpdate<O>) => void;
    error: any | undefined;
    orderForm: O;
}
declare type UseEstimateShipping = () => {
    estimateShipping: (address: CheckoutAddress, orderFormId?: string) => Promise<CheckoutOrderForm>;
};
declare type UseSelectDeliveryOption = () => {
    selectDeliveryOption: (deliveryOptionId: string, orderFormId?: string) => Promise<CheckoutOrderForm>;
};
declare type UseSelectPickupOption = () => {
    selectPickupOption: (pickupOptionId: string, orderFormId?: string) => Promise<CheckoutOrderForm>;
};
declare type UseUpdateSelectedAddress = () => {
    updateSelectedAddress: (address: CheckoutAddress, orderFormId?: string) => Promise<CheckoutOrderForm>;
};
interface CreateOrderShippingProvider<O extends CheckoutOrderForm> {
    useLogger: UseLogger;
    useOrderQueue: () => QueueContext;
    useOrderForm: () => OrderContext<O>;
    useQueueStatus: (listen: OrderQueueContext<O>['listen']) => any;
    useEstimateShipping: UseEstimateShipping;
    useSelectDeliveryOption: UseSelectDeliveryOption;
    useSelectPickupOption: UseSelectPickupOption;
    useUpdateSelectedAddress: UseUpdateSelectedAddress;
}
export declare function createOrderShippingProvider({ useLogger, useOrderQueue, useOrderForm, useQueueStatus, useEstimateShipping, useSelectDeliveryOption, useSelectPickupOption, useUpdateSelectedAddress, }: CreateOrderShippingProvider<CheckoutOrderForm>): {
    OrderShippingProvider: React.FC<{}>;
};
export declare const useOrderShipping: () => ShippingContext;
declare const _default: {
    createOrderShippingProvider: typeof createOrderShippingProvider;
    useOrderShipping: () => ShippingContext;
};
export default _default;
