/**
 * Get the modifer from any collection matching the rule collection{id, modifier}
 * @param {*} id
 * @param {*} collection
 */
export declare const getModifier: (collection: Enhancement[], id?: string | undefined) => string | undefined;
/**
 * Get a subset of the collections with given ids (passed with commas)
 * @param {*} tokens
 * @param {*} collection
 */
export declare const getSubset: (tokens: string, collection: Enhancement[]) => Enhancement[];
/**
 * Get enhancement modifier
 * @param enhancementList list of enhancements
 * @param enhancement desired enhancement
 * @param supported all supported enhancement list
 */
export declare const getEnhancement: (enhancementList: Enhancement[], enhancement?: string | undefined, supported?: string | undefined) => string | undefined;
/**
 * Get orientation modifier
 * @param orientation desired orientation
 * @param supported suported orientations
 */
export declare const getOrientation: (orientation?: string | undefined, supported?: string | undefined) => string | undefined;
/**
 * Get type modifier
 * @param type desired type
 * @param supported suported types
 */
export declare const getType: (type?: string | undefined, supported?: string | undefined) => string | undefined;
/**
 * Get state modifier
 * @param state desirend state
 * @param supported suported states
 */
export declare const getState: (state?: string | undefined, supported?: string | undefined) => string | undefined;
/**
 * Get shape modifier
 * @param size icon size
 * @param background background color
 * @param shape desired shape
 * @param supported suported shapes
 */
export declare const getShape: (size: number, background: string, shape?: string | undefined, supported?: string | undefined) => {
    wrapperProps: ({
        className: string;
        style?: undefined;
    } | {
        style: {
            padding: number;
            backgroundColor: string;
        };
        className?: undefined;
    })[];
    reducedIconSize: number;
};
